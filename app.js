document.addEventListener('DOMContentLoaded', () => {
    const catNameInput = document.getElementById('cat-name');
    const catAgeInput = document.getElementById('cat-age');
    const catBreedInput = document.getElementById('cat-breed');
    const catPhotoInput = document.getElementById('cat-photo'); // –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ñ–æ—Ç–æ
    const addCatButton = document.getElementById('add-cat');
    const catList = document.getElementById('cat-list');
    const filterCats = document.getElementById('filter-cats');
    const themeToggle = document.getElementById('theme-toggle');
    const modal = document.getElementById('modal');
    const closeModal = document.querySelector('.close');

    let cats = [];
    loadCats();

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    closeModal.addEventListener('click', () => {
        modal.style.display = 'none'; // –£–±–∏—Ä–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    });

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    themeToggle.addEventListener('click', () => {
        document.body.classList.toggle('dark-theme');
        const isDarkTheme = document.body.classList.contains('dark-theme');
        localStorage.setItem('theme', isDarkTheme ? 'dark' : 'light');
        themeToggle.textContent = isDarkTheme ? '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ üåù' : '–¢—ë–º–Ω–∞—è —Ç–µ–º–∞ üåö';
    });

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ç–µ–º—ã –∏–∑ localStorage
    applySavedTheme();

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–∫–∏
    addCatButton.addEventListener('click', () => {
        const name = catNameInput.value.trim();
        const age = catAgeInput.value.trim();
        const breed = catBreedInput.value.trim();
        const photo = catPhotoInput.files[0]; // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ

        if (name && age && breed) {
            addCat(name, age, breed, photo);
            catNameInput.value = '';
            catAgeInput.value = '';
            catBreedInput.value = '';
            catPhotoInput.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –¥–ª—è —Ñ–æ—Ç–æ
        } else {
            showToast('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
        }
    });

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –∫–æ—à–µ–∫
    function renderCats(catsToRender = cats) {
        catList.innerHTML = '';
        catsToRender.forEach(cat => {
            const li = document.createElement('li');
            li.innerHTML = `
                <div>
                    <strong>${cat.name}</strong> (${cat.age} –ª–µ—Ç, ${cat.breed})
                    <span class="${cat.status === 'available' ? 'available' : 'adopted'}">${cat.status}</span>
                </div>
                <div>
                    <button class="view-cat" data-id="${cat.id}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å</button>
                    <button class="adopt-cat" data-id="${cat.id}">${cat.status === 'available' ? '–£—Å—ã–Ω–æ–≤–∏—Ç—å' : '–û—Ç–º–µ–Ω–∏—Ç—å —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–µ'}</button>
                    <button class="delete-cat" data-id="${cat.id}">–£–¥–∞–ª–∏—Ç—å</button> <!-- –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è -->
                </div>
            `;
            if (cat.photo) { // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
                const img = document.createElement('img');
                img.src = cat.photo;
                img.style.maxWidth = '50px';
                li.prepend(img); // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç–æ–º
            }
            catList.appendChild(li);
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.view-cat').forEach(button => {
            button.addEventListener('click', () => showModal(button.dataset.id));
        });
        document.querySelectorAll('.adopt-cat').forEach(button => {
            button.addEventListener('click', () => toggleAdoption(button.dataset.id));
        });
        document.querySelectorAll('.delete-cat').forEach(button => { // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            button.addEventListener('click', () => deleteCat(button.dataset.id));
        });
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–∫–∏
    function addCat(name, age, breed, photo) {
        const newCat = {
            id: Date.now(),
            name,
            age,
            breed,
            status: 'available',
            photo: photo ? URL.createObjectURL(photo) : '' // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–∞–π–ª –≤ URL
        };
        cats.push(newCat);
        saveCats();
        renderCats();
        showToast('–ö–æ—à–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—à–∫–∏
    function deleteCat(id) {
        cats = cats.filter(cat => cat.id != id);
        saveCats();
        renderCats();
        showToast('–ö–æ—à–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏—è
    function toggleAdoption(id) {
        const cat = cats.find(cat => cat.id == id);

        if (cat.status === 'available') {
            cat.status = 'adopted';
        } else {
            cat.status = 'available';
        }

        saveCats();
        renderCats();
        showToast(`–°—Ç–∞—Ç—É—Å –∫–æ—à–∫–∏ "${cat.name}" –∏–∑–º–µ–Ω—ë–Ω`);
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    function showModal(id) {
        const cat = cats.find(cat => cat.id == id);
        document.getElementById('modal-cat-photo').src = cat.photo || ''; // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ç–æ
        document.getElementById('modal-cat-name').textContent = cat.name;
        document.getElementById('modal-cat-age').textContent = cat.age;
        document.getElementById('modal-cat-breed').textContent = cat.breed;
        document.getElementById('modal-cat-status').textContent = cat.status;
        modal.style.display = 'flex'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    }

    // –§–∏–ª—å—Ç—Ä –∫–æ—à–µ–∫
    filterCats.addEventListener('change', () => {
        const selectedFilter = filterCats.value;
        filterCatsList(selectedFilter); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    });

    function filterCatsList(filter) {
        let filteredCats = [];

        switch (filter) {
            case 'available':
                filteredCats = cats.filter(cat => cat.status === 'available');
                break;
            case 'adopted':
                filteredCats = cats.filter(cat => cat.status === 'adopted');
                break;
            default:
                filteredCats = cats; // –í—Å–µ –∫–æ—à–∫–∏
        }

        renderCats(filteredCats); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
    function saveCats() {
        localStorage.setItem('cats', JSON.stringify(cats.map(cat => ({
            ...cat,
            photo: '' // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ Blob URL
        }))));
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
    function loadCats() {
        const savedCats = localStorage.getItem('cats');
        if (savedCats) {
            cats = JSON.parse(savedCats).map(cat => ({ ...cat, photo: '' })); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Ñ–æ—Ç–æ
            renderCats();
        }
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ç–µ–º—ã
    function applySavedTheme() {
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme === 'dark') {
            document.body.classList.add('dark-theme');
            themeToggle.textContent = '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ üåù';
        } else {
            document.body.classList.remove('dark-theme');
            themeToggle.textContent = '–¢—ë–º–Ω–∞—è —Ç–µ–º–∞ üåö';
        }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    function showToast(message) {
        const toast = document.createElement('div');
        toast.className = 'toast';
        toast.textContent = message;
        document.body.appendChild(toast);

        toast.style.position = 'fixed';
        toast.style.top = '20px';
        toast.style.left = '50%';
        toast.style.transform = 'translateX(-50%)';
        toast.style.padding = '10px 20px';
        toast.style.backgroundColor = '#989393';
        toast.style.color = '#fff';
        toast.style.borderRadius = '5px';
        toast.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.1)';
        toast.style.zIndex = '1000';
        toast.style.opacity = '0';
        toast.style.transition = 'opacity 0.3s ease-in-out';

        setTimeout(() => {
            toast.style.opacity = '1';
        }, 10);

        setTimeout(() => {
            toast.style.opacity = '0';
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }
});